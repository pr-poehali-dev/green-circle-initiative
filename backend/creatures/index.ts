interface Event {
    httpMethod: string;
    path: string;
    body?: string;
    headers: Record<string, string>;
    queryStringParameters?: Record<string, string>;
}

interface Response {
    statusCode: number;
    headers?: Record<string, string>;
    body: string;
}

interface Creature {
    name: string;
    description: string;
    habitat: string;
    abilities: string[];
    rarity: 'common' | 'rare' | 'legendary';
    emoji: string;
}

export async function handler(event: Event): Promise<Response> {
    try {
        const creature = generateCreature();
        
        return {
            statusCode: 200,
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type'
            },
            body: JSON.stringify({
                success: true,
                creature,
                timestamp: new Date().toISOString()
            })
        };
    } catch (error) {
        return {
            statusCode: 500,
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            body: JSON.stringify({
                success: false,
                error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤–∞'
            })
        };
    }
}

function generateCreature(): Creature {
    const prefixes = ['–ö—Ä—ã–ª–æ', '–û–≥–Ω–µ', '–í–æ–¥–æ', '–ó–µ–º–ª–µ', '–ù–µ–±–µ—Å', '–õ—É–Ω–Ω–æ', '–°–æ–ª–Ω–µ—á', '–ó–≤–µ–∑–¥–æ'];
    const bases = ['–ª–µ–≤', '—Ç–∏–≥—Ä', '–≤–æ–ª–∫', '–º–µ–¥–≤–µ–¥—å', '–æ—Ä–µ–ª', '–¥–µ–ª—å—Ñ–∏–Ω', '–∑–º–µ–π', '–æ–ª–µ–Ω—å'];
    const suffixes = ['—É—Å', '–∫—Ä—ã–ª', '—Ö–≤–æ—Å—Ç', '–≥–ª–∞–∑', '–ª–∞–ø', '—Ä–æ–≥'];
    
    const habitats = [
        '–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ª–µ—Å–∞',
        '–ü–æ–¥–≤–æ–¥–Ω—ã–µ –ø–µ—â–µ—Ä—ã', 
        '–í—ã—Å–æ–∫–æ–≥–æ—Ä–Ω—ã–µ –ø–ª–∞—Ç–æ',
        '–í—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∏–µ –¥–æ–ª–∏–Ω—ã',
        '–ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—â–µ—Ä—ã',
        '–ü–ª–∞–≤—É—á–∏–µ –æ—Å—Ç—Ä–æ–≤–∞'
    ];

    const abilities = [
        '–¢–µ–ª–µ–ø–∞—Ç–∏—è',
        '–ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ–≥–æ–¥—ã',
        '–ù–µ–≤–∏–¥–∏–º–æ—Å—Ç—å',
        '–ò—Å—Ü–µ–ª–µ–Ω–∏–µ',
        '–ü–æ–ª–µ—Ç',
        '–ü—Ä–µ–¥–≤–∏–¥–µ–Ω–∏–µ',
        '–ò–ª–ª—é–∑–∏–∏',
        '–î—ã—Ö–∞–Ω–∏–µ –ø–æ–¥ –≤–æ–¥–æ–π'
    ];

    const emojis = ['ü¶Å', 'üêÖ', 'üê∫', 'üêª', 'ü¶Ö', 'üê¨', 'üêç', 'ü¶å', 'ü¶Ñ', 'üêâ'];
    
    const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];
    const base = bases[Math.floor(Math.random() * bases.length)];
    const suffix = suffixes[Math.floor(Math.random() * suffixes.length)];
    
    const name = `${prefix}${base}${suffix}`;
    const rarity = Math.random() < 0.1 ? 'legendary' : Math.random() < 0.3 ? 'rare' : 'common';
    const numAbilities = rarity === 'legendary' ? 3 : rarity === 'rare' ? 2 : 1;
    
    const creatureAbilities = [];
    const shuffled = [...abilities].sort(() => 0.5 - Math.random());
    for (let i = 0; i < numAbilities; i++) {
        creatureAbilities.push(shuffled[i]);
    }
    
    const descriptions = {
        common: '–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑ –≥–ª—É–±–∏–Ω —Ñ–∞–Ω—Ç–∞–∑–∏–∏',
        rare: '–†–µ–¥–∫–æ–µ —Å—É—â–µ—Å—Ç–≤–æ —Å –æ—Å–æ–±—ã–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏',
        legendary: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–≤–∏–¥–∞–Ω–Ω–æ–π —Å–∏–ª—ã'
    };
    
    return {
        name,
        description: descriptions[rarity],
        habitat: habitats[Math.floor(Math.random() * habitats.length)],
        abilities: creatureAbilities,
        rarity,
        emoji: emojis[Math.floor(Math.random() * emojis.length)]
    };
}