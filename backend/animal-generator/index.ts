/**
 * Function: animal-generator
 * Business: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø—É—Ç—ë–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö. 
 * –°–æ–∑–¥–∞—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥–∏–±—Ä–∏–¥—ã —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
 * Methods: GET - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
 * Request: Headers: none, Query: none, Body: none
 * Response: Success(200) - JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –∏ ID, Error(500) - –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 * Dependencies: uuid@9.0.0 - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
 * Env: none
 */

import { v4 as uuidv4 } from 'uuid';

interface CloudFunctionEvent {
  httpMethod: string;
  headers: Record<string, string>;
  body?: string;
  queryStringParameters?: Record<string, string>;
}

interface CloudFunctionResponse {
  statusCode: number;
  headers: Record<string, string>;
  body: string;
}

interface Animal {
  id: string;
  name: string;
  description: string;
  habitat: string;
  diet: string;
  size: string;
  special_ability: string;
  appearance: string;
  sound: string;
  rarity: string;
  discovery_year: number;
}

interface AnimalResponse {
  success: boolean;
  animal: Animal;
  generated_at: string;
}

export const handler = async (event: CloudFunctionEvent): Promise<CloudFunctionResponse> => {
  const { httpMethod } = event;
  const requestId = uuidv4();
  
  console.log(`[${requestId}] –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ${httpMethod}`);

  if (httpMethod !== 'GET') {
    console.log(`[${requestId}] –ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥: ${httpMethod}`);
    return {
      statusCode: 405,
      headers: { 
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET',
        'Access-Control-Allow-Headers': 'Content-Type'
      },
      body: JSON.stringify({ success: false, error: 'Method not allowed' })
    };
  }

  try {
    const animalParts = {
      head: ['–ª–µ–≤', '–æ—Ä—ë–ª', '–¥—Ä–∞–∫–æ–Ω', '–µ–¥–∏–Ω–æ—Ä–æ–≥', '—Å–æ–≤–∞', '–≤–æ–ª–∫', '—Ç–∏–≥—Ä', '–º–µ–¥–≤–µ–¥—å'],
      body: ['–ª–æ—à–∞–¥—å', '—Ä—ã–±–∞', '–∑–º–µ—è', '–∫–æ—Ç', '–ø—Ç–∏—Ü–∞', '–æ–ª–µ–Ω—å', '–ø–∞–Ω—Ç–µ—Ä–∞', '–¥–µ–ª—å—Ñ–∏–Ω'],
      tail: ['–ø–∞–≤–ª–∏–Ω', '—è—â–µ—Ä–∏—Ü–∞', '—Å–∫–æ—Ä–ø–∏–æ–Ω', '–ª–∏—Å–∞', '–¥—Ä–∞–∫–æ–Ω', '–∫–∏—Ç', '—Ñ–µ–Ω–∏–∫—Å', '–±–µ–ª–∫–∞']
    };

    const habitats = [
      '–∑–∞–∫–æ–ª–¥–æ–≤–∞–Ω–Ω—ã–µ –ª–µ—Å–∞ —Å —Å–≤–µ—Ç—è—â–∏–º–∏—Å—è –¥–µ—Ä–µ–≤—å—è–º–∏',
      '–∫—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—â–µ—Ä—ã –≤ –≥–æ—Ä–∞—Ö',
      '–ø–ª–∞–≤–∞—é—â–∏–µ –æ—Å—Ç—Ä–æ–≤–∞ –≤ –æ–±–ª–∞–∫–∞—Ö',
      '—Ä–∞–¥—É–∂–Ω—ã–µ –≤–æ–¥–æ–ø–∞–¥—ã',
      '–ø–æ–¥–≤–æ–¥–Ω—ã–µ –∫–æ—Ä–∞–ª–ª–æ–≤—ã–µ –≥–æ—Ä–æ–¥–∞'
    ];

    const diets = [
      '–ø–∏—Ç–∞–µ—Ç—Å—è –º–∞–≥–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π –∏ –ª—É–Ω–Ω—ã–º —Å–≤–µ—Ç–æ–º',
      '–µ—Å—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –∏ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ –∫–∞–º–Ω–∏',
      '–æ—Ö–æ—Ç–∏—Ç—Å—è –Ω–∞ –æ–±–ª–∞–∫–∞ –∏ –ª–æ–≤–∏—Ç –∑–≤—ë–∑–¥—ã',
      '—Å–æ–±–∏—Ä–∞–µ—Ç –Ω–µ–∫—Ç–∞—Ä —Ä–∞–¥—É–∂–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤'
    ];

    const sizes = [
      '—Ä–∞–∑–º–µ—Ä–æ–º —Å –¥–æ–º–∞—à–Ω–µ–≥–æ –∫–æ—Ç–∞, –Ω–æ —Å –∫—Ä—ã–ª—å—è–º–∏ —Ä–∞–∑–º–∞—Ö–æ–º 2 –º–µ—Ç—Ä–∞',
      '–≤—ã—Å–æ—Ç–æ–π —Å –ª–æ—à–∞–¥—å, –¥–ª–∏–Ω–æ–π —Ç–µ–ª–∞ 3 –º–µ—Ç—Ä–∞',
      '–∫—Ä–æ—à–µ—á–Ω—ã–π, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ –ª–∞–¥–æ–Ω–∏',
      '–æ–≥—Ä–æ–º–Ω—ã–π –∫–∞–∫ —Å–ª–æ–Ω, –Ω–æ –ª—ë–≥–∫–∏–π –∫–∞–∫ –ø–µ—Ä—ã—à–∫–æ'
    ];

    const abilities = [
      '–º–æ–∂–µ—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –Ω–µ–≤–∏–¥–∏–º—ã–º –ø—Ä–∏ –ª—É–Ω–Ω–æ–º —Å–≤–µ—Ç–µ',
      '—É–º–µ–µ—Ç —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ç–µ–Ω–∏',
      '—Å–æ–∑–¥–∞—ë—Ç —Ä–∞–¥—É–∂–Ω—ã–µ –º–æ—Å—Ç—ã –≤ –≤–æ–∑–¥—É—Ö–µ',
      '–∏—Å—Ü–µ–ª—è–µ—Ç —Ä–∞–Ω—ã —Å–≤–æ–∏–º–∏ —Å–ª–µ–∑–∞–º–∏',
      '–º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ü–≤–µ—Ç —à–µ—Ä—Å—Ç–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é'
    ];

    const appearances = [
      '–ø–µ—Ä–µ–ª–∏–≤–∞–µ—Ç—Å—è –≤—Å–µ–º–∏ —Ü–≤–µ—Ç–∞–º–∏ —Ä–∞–¥—É–≥–∏',
      '–∏–º–µ–µ—Ç —Å–µ—Ä–µ–±—Ä–∏—Å—Ç—É—é —à–µ—Ä—Å—Ç—å —Å–æ –∑–≤—ë–∑–¥–Ω—ã–º–∏ –ø—è—Ç–Ω–∞–º–∏',
      '—Å–≤–µ—Ç–∏—Ç—Å—è –º—è–≥–∫–∏–º –≥–æ–ª—É–±—ã–º —Å–∏—è–Ω–∏–µ–º',
      '–ø–æ–∫—Ä—ã—Ç –∫—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–º–∏ —á–µ—à—É–π–∫–∞–º–∏'
    ];

    const sounds = [
      '–∏–∑–¥–∞—ë—Ç –º–µ–ª–æ–¥–∏—á–Ω—ã–µ —Ç—Ä–µ–ª–∏ –∫–∞–∫ –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫–∏',
      '–ø–æ—ë—Ç –∫–∞–∫ —Ö–æ—Ä –∞–Ω–≥–µ–ª–æ–≤',
      '–º—É—Ä–ª—ã—á–µ—Ç –∫–∞–∫ –≥—Ä–æ–º –≤–¥–∞–ª–µ–∫–µ',
      '—Å–≤–∏—Å—Ç–∏—Ç –∫–∞–∫ –≤–µ—Ç–µ—Ä –≤ –≥–æ—Ä–∞—Ö'
    ];

    const rarities = ['–û–±—ã—á–Ω–æ–µ', '–†–µ–¥–∫–æ–µ', '–≠–ø–∏—á–µ—Å–∫–æ–µ', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ', '–ú–∏—Ñ–∏—á–µ—Å–∫–æ–µ'];

    const animalId = uuidv4();
    const randomHead = animalParts.head[Math.floor(Math.random() * animalParts.head.length)];
    const randomBody = animalParts.body[Math.floor(Math.random() * animalParts.body.length)];
    const randomTail = animalParts.tail[Math.floor(Math.random() * animalParts.tail.length)];
    
    console.log(`[${requestId}] üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∂–∏–≤–æ—Ç–Ω–æ–µ ${animalId}: ${randomHead}-${randomBody}-${randomTail}`);

    const name = `${randomHead.charAt(0).toUpperCase() + randomHead.slice(1)}-${randomBody}-${randomTail}`;
    const rarity = rarities[Math.floor(Math.random() * rarities.length)];
    const discoveryYear = 2020 + Math.floor(Math.random() * 5);
    
    const animal: Animal = {
      id: animalId,
      name,
      description: `–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å –≥–æ–ª–æ–≤–æ–π ${randomHead}–∞, —Ç–µ–ª–æ–º ${randomBody} –∏ —Ö–≤–æ—Å—Ç–æ–º ${randomTail}–∞. –≠—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≥–∏–±—Ä–∏–¥, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—á–µ—Ç–∞–µ—Ç –≤ —Å–µ–±–µ –ª—É—á—à–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤—Å–µ—Ö —Ç—Ä—ë—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö.`,
      habitat: habitats[Math.floor(Math.random() * habitats.length)],
      diet: diets[Math.floor(Math.random() * diets.length)],
      size: sizes[Math.floor(Math.random() * sizes.length)],
      special_ability: abilities[Math.floor(Math.random() * abilities.length)],
      appearance: appearances[Math.floor(Math.random() * appearances.length)],
      sound: sounds[Math.floor(Math.random() * sounds.length)],
      rarity,
      discovery_year: discoveryYear
    };
    
    console.log(`[${requestId}] ‚ú® –ñ–∏–≤–æ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–æ: ${name} (${rarity})`);

    const response: AnimalResponse = {
      success: true,
      animal,
      generated_at: new Date().toISOString()
    };

    console.log(`[${requestId}] ‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
    
    return {
      statusCode: 200,
      headers: { 
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET',
        'Access-Control-Allow-Headers': 'Content-Type',
        'X-Request-ID': requestId
      },
      body: JSON.stringify(response)
    };

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error}`);
    return {
      statusCode: 500,
      headers: { 
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      },
      body: JSON.stringify({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ',
        generated_at: new Date().toISOString()
      })
    };
  }
};