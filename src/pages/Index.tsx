import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import Icon from '@/components/ui/icon';
import { useAuth } from '@/contexts/AuthContext';
import { Link } from 'react-router-dom';
import functionsData from '../../backend/func2url.json';

interface SpaceFactResult {
  success: boolean;
  timestamp: string;
  total_facts: number;
  categories: string[];
  fact_data: {
    fact: string;
    explanation: string;
    category: string;
  };
  fun_bonus: string;
  request_info: {
    function_name: string;
    method: string;
    filtered_by: string;
  };
  status: number;
  error?: string;
}

const Index = () => {
  const [loading, setLoading] = useState<boolean>(false);
  const [result, setResult] = useState<SpaceFactResult | null>(null);
  const { isAuthenticated, user } = useAuth();

  const getSpaceFact = async () => {
    setLoading(true);
    setResult(null);

    try {
      const url = functionsData['space-facts' as keyof typeof functionsData];
      
      if (!url) {
        setResult({
          success: false,
          timestamp: new Date().toISOString(),
          total_facts: 0,
          categories: [],
          fact_data: { fact: '', explanation: '', category: '' },
          fun_bonus: '',
          request_info: { function_name: '', method: '', filtered_by: '' },
          status: 404,
          error: 'URL not found'
        });
        return;
      }

      const response = await fetch(url);
      const data = await response.json();
      
      setResult({
        ...data,
        status: response.status
      });
    } catch (error) {
      setResult({
        success: false,
        timestamp: new Date().toISOString(),
        total_facts: 0,
        categories: [],
        fact_data: { fact: '', explanation: '', category: '' },
        fun_bonus: '',
        request_info: { function_name: '', method: '', filtered_by: '' },
        status: 500,
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-100 p-8">
      <div className="max-w-4xl mx-auto">
        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="flex justify-between items-center mb-8 bg-white/70 backdrop-blur-sm rounded-lg p-4 shadow-sm">
          <h2 className="text-lg font-semibold">–ì–ª–∞–≤–Ω–∞—è</h2>
          <div className="flex items-center space-x-4">
            {isAuthenticated ? (
              <>
                <span className="text-sm text-muted-foreground">
                  –ü—Ä–∏–≤–µ—Ç, {user?.username}!
                </span>
                <Button asChild variant="outline" size="sm">
                  <Link to="/profile">
                    <Icon name="User" className="mr-2 h-4 w-4" />
                    –ü—Ä–æ—Ñ–∏–ª—å
                  </Link>
                </Button>
              </>
            ) : (
              <Button asChild size="sm">
                <Link to="/auth">
                  <Icon name="LogIn" className="mr-2 h-4 w-4" />
                  –í–æ–π—Ç–∏
                </Link>
              </Button>
            )}
          </div>
        </div>
        <div className="text-center mb-12">
          <h1 className="text-5xl font-bold text-gray-900 mb-4">
            üöÄ –ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã!
          </h1>
          <p className="text-xl text-gray-600 mb-8">
            {isAuthenticated 
              ? `–ü—Ä–∏–≤–µ—Ç, ${user?.username}! –ì–æ—Ç–æ–≤ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ –æ –∫–æ—Å–º–æ—Å–µ?`
              : '–£–∑–Ω–∞–π —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –∫–æ—Å–º–æ—Å–µ –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π'
            }
          </p>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–∞ */}
        <div className="mb-8">
          <Card className="max-w-lg mx-auto">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2 justify-center">
                <Icon name="Sparkles" className="h-6 w-6 text-purple-600" />
                <span>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ–≤</span>
              </CardTitle>
              <CardDescription className="text-center">
                –ü–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—ã–π —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–∫—Ç –æ –∫–æ—Å–º–æ—Å–µ
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Button 
                onClick={getSpaceFact}
                disabled={loading}
                className="w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700"
                size="lg"
              >
                {loading ? (
                  <>
                    <Icon name="Loader2" className="mr-2 h-4 w-4 animate-spin" />
                    –ò—â—É —Ñ–∞–∫—Ç...
                  </>
                ) : (
                  <>
                    <Icon name="Rocket" className="mr-2 h-4 w-4" />
                    –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç
                  </>
                )}
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç - –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç */}
        {result && (
          <Card className="max-w-2xl mx-auto">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2 justify-center">
                <Icon 
                  name={result.success ? "Stars" : "XCircle"} 
                  className={`h-6 w-6 ${
                    result.success ? 'text-yellow-600' : 'text-red-600'
                  }`}
                />
                <span>{result.success ? result.fun_bonus : '–û—à–∏–±–∫–∞'}</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              {result.success ? (
                <div className="space-y-6">
                  {/* –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–∫—Ç */}
                  <div className="bg-gradient-to-br from-purple-50 to-blue-50 p-6 rounded-lg border">
                    <h3 className="font-bold text-lg mb-3 text-purple-900">
                      üí´ {result.fact_data.fact}
                    </h3>
                    <p className="text-gray-700 leading-relaxed">
                      {result.fact_data.explanation}
                    </p>
                    <div className="mt-4 flex items-center space-x-2">
                      <Icon name="Tag" className="h-4 w-4 text-purple-600" />
                      <span className="text-sm font-semibold text-purple-600 bg-purple-100 px-2 py-1 rounded">
                        {result.fact_data.category}
                      </span>
                    </div>
                  </div>
                  
                  {/* –ú–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                  <div className="grid md:grid-cols-2 gap-4 text-sm">
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <div className="font-semibold text-gray-700 mb-2">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</div>
                      <div>–í—Å–µ–≥–æ —Ñ–∞–∫—Ç–æ–≤: {result.total_facts}</div>
                      <div>–ö–∞—Ç–µ–≥–æ—Ä–∏–π: {result.categories.length}</div>
                    </div>
                    
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <div className="font-semibold text-gray-700 mb-2">üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</div>
                      <div className="flex flex-wrap gap-1">
                        {result.categories.map((cat, index) => (
                          <span key={index} className="text-xs bg-gray-200 px-2 py-1 rounded">
                            {cat}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="text-center text-red-600">
                  <p>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç</p>
                  {result.error && (
                    <div className="mt-2 text-sm bg-red-50 p-3 rounded">
                      {result.error}
                    </div>
                  )}
                </div>
              )}
            </CardContent>
          </Card>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ */}
        <Card className="mt-8">
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Icon name="Info" className="h-6 w-6 text-blue-600" />
              <span>–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ–≤</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-3 gap-6">
              <div>
                <h3 className="font-semibold text-lg mb-2">üî¨ –ß—Ç–æ —ç—Ç–æ?</h3>
                <ul className="text-sm text-gray-600 space-y-1">
                  <li>‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ–≤</li>
                  <li>‚Ä¢ 8 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤</li>
                  <li>‚Ä¢ 5 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π</li>
                  <li>‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è</li>
                </ul>
              </div>
              
              <div>
                <h3 className="font-semibold text-lg mb-2">‚öôÔ∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</h3>
                <ul className="text-sm text-gray-600 space-y-1">
                  <li>‚Ä¢ Python backend —Ñ—É–Ω–∫—Ü–∏—è</li>
                  <li>‚Ä¢ React frontend</li>
                  <li>‚Ä¢ Cloud Functions</li>
                  <li>‚Ä¢ JSON API</li>
                </ul>
              </div>
              
              <div>
                <h3 className="font-semibold text-lg mb-2">üåå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–∞–∫—Ç–æ–≤:</h3>
                <ul className="text-sm text-gray-600 space-y-1">
                  <li>‚Ä¢ –ü–ª–∞–Ω–µ—Ç—ã</li>
                  <li>‚Ä¢ –ó–≤—ë–∑–¥—ã</li>
                  <li>‚Ä¢ –§–∏–∑–∏–∫–∞ –∫–æ—Å–º–æ—Å–∞</li>
                  <li>‚Ä¢ –ö–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∞</li>
                  <li>‚Ä¢ –ì–∞–ª–∞–∫—Ç–∏–∫–∏</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default Index;