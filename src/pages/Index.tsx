import { useState, useEffect } from 'react';

interface Creature {
  name: string;
  description: string;
  habitat: string;
  abilities: string[];
  rarity: 'common' | 'rare' | 'legendary';
  emoji: string;
}

interface CreatureResponse {
  success: boolean;
  creature: Creature;
  timestamp: string;
}

const Index = () => {
  const [creature, setCreature] = useState<Creature | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [lastUpdate, setLastUpdate] = useState<string>('');

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤ –ø–æ–∫–∞ –±–µ–∫–µ–Ω–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
  const generateLocalCreature = (): Creature => {
    const prefixes = ['–ö—Ä—ã–ª–æ', '–û–≥–Ω–µ', '–í–æ–¥–æ', '–ó–µ–º–ª–µ', '–ù–µ–±–µ—Å', '–õ—É–Ω–Ω–æ', '–°–æ–ª–Ω–µ—á', '–ó–≤–µ–∑–¥–æ'];
    const bases = ['–ª–µ–≤', '—Ç–∏–≥—Ä', '–≤–æ–ª–∫', '–º–µ–¥–≤–µ–¥—å', '–æ—Ä–µ–ª', '–¥–µ–ª—å—Ñ–∏–Ω', '–∑–º–µ–π', '–æ–ª–µ–Ω—å'];
    const suffixes = ['—É—Å', '–∫—Ä—ã–ª', '—Ö–≤–æ—Å—Ç', '–≥–ª–∞–∑', '–ª–∞–ø', '—Ä–æ–≥'];
    
    const habitats = [
      '–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ª–µ—Å–∞',
      '–ü–æ–¥–≤–æ–¥–Ω—ã–µ –ø–µ—â–µ—Ä—ã', 
      '–í—ã—Å–æ–∫–æ–≥–æ—Ä–Ω—ã–µ –ø–ª–∞—Ç–æ',
      '–í—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∏–µ –¥–æ–ª–∏–Ω—ã',
      '–ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—â–µ—Ä—ã',
      '–ü–ª–∞–≤—É—á–∏–µ –æ—Å—Ç—Ä–æ–≤–∞'
    ];

    const abilities = [
      '–¢–µ–ª–µ–ø–∞—Ç–∏—è',
      '–ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ–≥–æ–¥—ã',
      '–ù–µ–≤–∏–¥–∏–º–æ—Å—Ç—å',
      '–ò—Å—Ü–µ–ª–µ–Ω–∏–µ',
      '–ü–æ–ª–µ—Ç',
      '–ü—Ä–µ–¥–≤–∏–¥–µ–Ω–∏–µ',
      '–ò–ª–ª—é–∑–∏–∏',
      '–î—ã—Ö–∞–Ω–∏–µ –ø–æ–¥ –≤–æ–¥–æ–π'
    ];

    const emojis = ['ü¶Å', 'üêÖ', 'üê∫', 'üêª', 'ü¶Ö', 'üê¨', 'üêç', 'ü¶å', 'ü¶Ñ', 'üêâ'];
    
    const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];
    const base = bases[Math.floor(Math.random() * bases.length)];
    const suffix = suffixes[Math.floor(Math.random() * suffixes.length)];
    
    const name = `${prefix}${base}${suffix}`;
    const rarity = Math.random() < 0.1 ? 'legendary' : Math.random() < 0.3 ? 'rare' : 'common';
    const numAbilities = rarity === 'legendary' ? 3 : rarity === 'rare' ? 2 : 1;
    
    const creatureAbilities = [];
    const shuffled = [...abilities].sort(() => 0.5 - Math.random());
    for (let i = 0; i < numAbilities; i++) {
      creatureAbilities.push(shuffled[i]);
    }
    
    const descriptions = {
      common: '–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑ –≥–ª—É–±–∏–Ω —Ñ–∞–Ω—Ç–∞–∑–∏–∏',
      rare: '–†–µ–¥–∫–æ–µ —Å—É—â–µ—Å—Ç–≤–æ —Å –æ—Å–æ–±—ã–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏',
      legendary: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–≤–∏–¥–∞–Ω–Ω–æ–π —Å–∏–ª—ã'
    };
    
    return {
      name,
      description: descriptions[rarity],
      habitat: habitats[Math.floor(Math.random() * habitats.length)],
      abilities: creatureAbilities,
      rarity,
      emoji: emojis[Math.floor(Math.random() * emojis.length)]
    };
  };

  const fetchCreature = async () => {
    setLoading(true);
    setError(null);

    try {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å –±–µ–∫–µ–Ω–¥ (–∫–æ–≥–¥–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç)
      // const response = await fetch('BACKEND_URL');
      // const data: CreatureResponse = await response.json();
      // setCreature(data.creature);
      
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
      await new Promise(resolve => setTimeout(resolve, 500)); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
      const newCreature = generateLocalCreature();
      setCreature(newCreature);
      setLastUpdate(new Date().toLocaleTimeString());
      
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—É—â–µ—Å—Ç–≤–∞');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å—É—â–µ—Å—Ç–≤–æ —Å—Ä–∞–∑—É
    fetchCreature();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ 5 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(() => {
      fetchCreature();
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  const getRarityColor = (rarity: string) => {
    switch (rarity) {
      case 'legendary': return 'text-yellow-400 bg-yellow-400/20';
      case 'rare': return 'text-purple-400 bg-purple-400/20';
      default: return 'text-gray-400 bg-gray-400/20';
    }
  };

  const getRarityBorder = (rarity: string) => {
    switch (rarity) {
      case 'legendary': return 'border-yellow-400/50';
      case 'rare': return 'border-purple-400/50';
      default: return 'border-gray-400/50';
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 p-6">
      <div className="max-w-2xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-white mb-2">
            üåü –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ú–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –°—É—â–µ—Å—Ç–≤
          </h1>
          <p className="text-purple-200">
            –û—Ç–∫—Ä—ã–≤–∞–π –Ω–æ–≤—ã—Ö —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥!
          </p>
          {lastUpdate && (
            <p className="text-purple-300 text-sm mt-2">
              –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {lastUpdate}
            </p>
          )}
        </div>

        <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-8 border border-white/20 shadow-2xl">
          {loading && (
            <div className="text-center">
              <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-white"></div>
              <p className="text-white mt-2">–°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å—É—â–µ—Å—Ç–≤–æ...</p>
            </div>
          )}

          {error && (
            <div className="text-center text-red-400 bg-red-400/20 p-4 rounded-lg">
              {error}
            </div>
          )}

          {creature && !loading && (
            <div className="space-y-6">
              <div className="text-center">
                <div className="text-6xl mb-4">{creature.emoji}</div>
                <h2 className="text-3xl font-bold text-white mb-2">
                  {creature.name}
                </h2>
                <div className={`inline-block px-4 py-2 rounded-full text-sm font-medium ${getRarityColor(creature.rarity)}`}>
                  {creature.rarity === 'legendary' ? '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π' : 
                   creature.rarity === 'rare' ? '–†–µ–¥–∫–∏–π' : '–û–±—ã—á–Ω—ã–π'}
                </div>
              </div>

              <div className={`border-2 rounded-xl p-6 ${getRarityBorder(creature.rarity)} bg-white/5`}>
                <p className="text-purple-100 text-lg mb-4">
                  {creature.description}
                </p>

                <div className="space-y-4">
                  <div>
                    <h3 className="text-white font-semibold mb-2 flex items-center">
                      üèîÔ∏è –ú–µ—Å—Ç–æ –æ–±–∏—Ç–∞–Ω–∏—è
                    </h3>
                    <p className="text-purple-200">{creature.habitat}</p>
                  </div>

                  <div>
                    <h3 className="text-white font-semibold mb-2 flex items-center">
                      ‚ú® –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
                    </h3>
                    <div className="flex flex-wrap gap-2">
                      {creature.abilities.map((ability, index) => (
                        <span
                          key={index}
                          className="bg-indigo-500/30 text-indigo-200 px-3 py-1 rounded-full text-sm border border-indigo-400/30"
                        >
                          {ability}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
              </div>

              <div className="text-center">
                <button
                  onClick={fetchCreature}
                  disabled={loading}
                  className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 disabled:opacity-50 disabled:cursor-not-allowed text-white font-medium px-6 py-3 rounded-full transition-all transform hover:scale-105"
                >
                  üé≤ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å—É—â–µ—Å—Ç–≤–æ
                </button>
              </div>
            </div>
          )}
        </div>

        <div className="text-center mt-8 text-purple-300 text-sm">
          <p>üöÄ –ù–æ–≤–æ–µ —Å—É—â–µ—Å—Ç–≤–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥</p>
          <p className="mt-1">–ò–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</p>
        </div>
      </div>
    </div>
  );
};

export default Index;