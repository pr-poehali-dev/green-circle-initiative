import React, { useState, useEffect, useMemo } from 'react'; import { cars } from '@/data/cars'; import { Car, FilterOptions } from '@/types/car'; import Header from '@/components/Header'; import CarCard from '@/components/CarCard'; import CarFilter from '@/components/CarFilter'; import { Input } from '@/components/ui/input'; import { Button } from '@/components/ui/button'; import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'; import Icon from '@/components/ui/icon'; import { Pagination, PaginationContent, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious, PaginationEllipsis, } from '@/components/ui/pagination'; import { Sheet, SheetContent, SheetTrigger, SheetClose, } from '@/components/ui/sheet'; import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger, } from '@/components/ui/tooltip'; import { Badge } from '@/components/ui/badge'; import { useIsMobile } from '@/hooks/use-mobile'; // Новый хук для сохранения и восстановления состояния каталога const useCatalogState = () => { const getStoredState = (key, defaultValue) => { if (typeof window === 'undefined') return defaultValue; const stored = sessionStorage.getItem(`catalog_${key}`); return stored ? JSON.parse(stored) : defaultValue; }; const saveState = (key, value) => { if (typeof window !== 'undefined') { sessionStorage.setItem(`catalog_${key}`, JSON.stringify(value)); } }; return { getStoredState, saveState }; }; const Catalog = () => { const { getStoredState, saveState } = useCatalogState(); const isMobile = useIsMobile(); // Восстанавливаем состояние из sessionStorage или используем значения по умолчанию const [filteredCars, setFilteredCars] = useState(cars); const [searchQuery, setSearchQuery] = useState(getStoredState('searchQuery', '')); const [filters, setFilters] = useState(getStoredState('filters', {})); const [currentPage, setCurrentPage] = useState(getStoredState('currentPage', 1)); const [sortBy, setSortBy] = useState(getStoredState('sortBy', 'default')); const [viewMode, setViewMode] = useState(getStoredState('viewMode', 'grid')); const [isFilterSheetOpen, setIsFilterSheetOpen] = useState(false); const [activeFiltersCount, setActiveFiltersCount] = useState(0); const [isLoading, setIsLoading] = useState(false); // Количество элементов на странице в зависимости от режима отображения const carsPerPage = viewMode === 'grid' ? 6 : 4; // Подсчет количества активных фильтров useEffect(() => { setActiveFiltersCount(Object.keys(filters).length); saveState('filters', filters); }, [filters]); // Сохраняем состояние при изменении useEffect(() => { saveState('searchQuery', searchQuery); saveState('currentPage', currentPage); saveState('sortBy', sortBy); saveState('viewMode', viewMode); }, [searchQuery, currentPage, sortBy, viewMode]); // Фильтрация автомобилей useEffect(() => { setIsLoading(true); const timer = setTimeout(() => { let result = cars; // Поиск по запросу if (searchQuery) { const query = searchQuery.toLowerCase(); result = result.filter(car => car.brand.toLowerCase().includes(query) || car.model.toLowerCase().includes(query)); } // Применение фильтров if (filters.brand) { result = result.filter(car => car.brand === filters.brand); } if (filters.transmission) { result = result.filter(car => car.transmission === filters.transmission); } if (filters.fuelType) { result = result.filter(car => car.fuelType === filters.fuelType); } // Проверка на множественные значения (для обновленного фильтра) if (filters.transmissionTypes && Array.isArray(filters.transmissionTypes)) { result = result.filter(car => filters.transmissionTypes.includes(car.transmission)); } if (filters.fuelTypes && Array.isArray(filters.fuelTypes)) { result = result.filter(car => filters.fuelTypes.includes(car.fuelType)); } if (filters.minPrice) { result = result.filter(car => car.pricePerDay >= filters.minPrice); } if (filters.maxPrice) { result = result.filter(car => car.pricePerDay <= filters.maxPrice); } if (filters.minYear) { result = result.filter(car => car.year >= filters.minYear); } if (filters.maxYear) { result = result.filter(car => car.year <= filters.maxYear); } if (filters.features && Array.isArray(filters.features) && filters.features.length > 0) { result = result.filter(car => filters.features.some(feature => car.features.includes(feature))); } // Сортировка switch (sortBy) { case 'price-asc': result = [...result].sort((a, b) => a.pricePerDay - b.pricePerDay); break; case 'price-desc': result = [...result].sort((a, b) => b.pricePerDay - a.pricePerDay); break; case 'year-desc': result = [...result].sort((a, b) => b.year - a.year); break; case 'year-asc': result = [...result].sort((a, b) => a.year - b.year); break; case 'rating-desc': result = [...result].sort((a, b) => b.rating - a.rating); break; case 'name-asc': result = [...result].sort((a, b) => `${a.brand} ${a.model}`.localeCompare(`${b.brand} ${b.model}`)); break; default: break; } setFilteredCars(result); setIsLoading(false); // При изменении фильтров сбрасываем страницу на первую if (currentPage !== 1) { setCurrentPage(1); } }, 300); return () => clearTimeout(timer); }, [searchQuery, filters, sortBy]); // Пагинация const indexOfLastCar = currentPage * carsPerPage; const indexOfFirstCar = indexOfLastCar - carsPerPage; const currentCars = filteredCars.slice(indexOfFirstCar, indexOfLastCar); const totalPages = Math.ceil(filteredCars.length / carsPerPage); const handlePageChange = (pageNumber) => { setCurrentPage(pageNumber); window.scrollTo({ top: 0, behavior: 'smooth' }); }; // Функция для создания массива страниц с эллипсисом const getPaginationItems = () => { const items = []; const maxVisiblePages = isMobile ? 3 : 5; if (totalPages <= maxVisiblePages) { // Показываем все страницы, если их меньше максимального количества for (let i = 1; i <= totalPages; i++) { items.push(i); } } else { // Всегда показываем первую страницу items.push(1); // Для текущей страницы вблизи начала if (currentPage <= 3) { items.push(2, 3); items.push('ellipsis'); items.push(totalPages); } // Для текущей страницы вблизи конца else if (currentPage >= totalPages - 2) { items.push('ellipsis'); items.push(totalPages - 2, totalPages - 1, totalPages); } // Для текущей страницы в середине else { items.push('ellipsis'); items.push(currentPage - 1, currentPage, currentPage + 1); items.push('ellipsis'); items.push(totalPages); } } return items; }; // Рендер элемента карточки в зависимости от режима отображения const renderCar = (car) => { if (viewMode === 'list') { return ( // ... ); } // По умолчанию рендерим в режиме сетки return <CarCard key={car.id} car={car} />; }; // Рендер скелетона для загрузки const renderSkeleton = () => { // ... }; // Рендер результатов поиска const renderSearchResults = () => { if (isLoading) { return renderSkeleton(); } if (filteredCars.length === 0) { return ( // ... ); } return ( // ... ); }; return ( // ... ); }; export default Catalog;