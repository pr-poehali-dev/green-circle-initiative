
import React, { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";

interface WheelProps {
  segments: {
    id: string;
    text: string;
    color: string;
  }[];
  onSpinEnd?: (segment: string) => void;
  className?: string;
}

const Wheel = ({ segments, onSpinEnd, className }: WheelProps) => {
  const [spinning, setSpinning] = useState(false);
  const [rotation, setRotation] = useState(0);
  const [selectedSegment, setSelectedSegment] = useState<string | null>(null);
  const wheelRef = useRef<HTMLDivElement>(null);
  const spinDuration = 10000; // 10 —Å–µ–∫—É–Ω–¥ –≤—Ä–∞—â–µ–Ω–∏—è

  const spinWheel = () => {
    if (spinning) return;
    
    setSpinning(true);
    setSelectedSegment(null);
    
    // –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–æ—Ä–æ—Ç–æ–≤ (–º–µ–∂–¥—É 5 –∏ 10) –ø–ª—é—Å —Å–ª—É—á–∞–π–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
    const spins = 5 + Math.random() * 5;
    const degrees = spins * 360 + Math.random() * 360;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —É–≥–æ–ª –≤—Ä–∞—â–µ–Ω–∏—è
    setRotation(rotation + degrees);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
    setTimeout(() => {
      setSpinning(false);
      
      // –í—ã—á–∏—Å–ª—è–µ–º, –∫–∞–∫–æ–π —Å–µ–≥–º–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
      const normalizedRotation = (rotation + degrees) % 360;
      const segmentSize = 360 / segments.length;
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
      const segmentIndex = Math.floor(((360 - normalizedRotation) % 360) / segmentSize);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç
      const selected = segments[segmentIndex % segments.length].text;
      setSelectedSegment(selected);
      
      if (onSpinEnd) {
        onSpinEnd(selected);
      }
    }, spinDuration);
  };

  // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
  const segmentAngle = 360 / segments.length;

  return (
    <div className={cn("flex flex-col items-center gap-6", className)}>
      <div className="relative w-64 h-64 md:w-80 md:h-80">
        {/* –ù–µ–æ–Ω–æ–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å –±–∞—Ä–∞–±–∞–Ω–∞ */}
        <div 
          className="absolute top-0 left-1/2 -translate-x-1/2 -translate-y-6 z-10 flex flex-col items-center animate-pulse-slow"
        >
          <div className="w-6 h-10 bg-primary/80 rounded-t-lg backdrop-blur-sm shadow-[0_0_10px_2px_rgba(139,92,246,0.8)]"></div>
          <div className="w-0 h-0 
            border-l-[12px] border-l-transparent 
            border-r-[12px] border-r-transparent 
            border-t-[16px] border-t-primary/80 
            shadow-[0_0_10px_2px_rgba(139,92,246,0.8)]"></div>
        </div>
        
        {/* –ë–∞—Ä–∞–±–∞–Ω —Ä—É–ª–µ—Ç–∫–∏ */}
        <div 
          ref={wheelRef}
          className="w-full h-full rounded-full overflow-hidden border-8 border-gray-800/50 shadow-[0_0_15px_rgba(0,0,0,0.8),inset_0_0_10px_rgba(0,0,0,0.6)] relative"
          style={{ 
            transform: `rotate(${rotation}deg)`,
            transition: `transform ${spinDuration}ms cubic-bezier(0.2, 0.8, 0.2, 1)`,
            boxShadow: spinning ? "0 0 20px rgba(139, 92, 246, 0.5), inset 0 0 15px rgba(139, 92, 246, 0.3)" : 
                                   "0 0 15px rgba(0, 0, 0, 0.8), inset 0 0 10px rgba(0, 0, 0, 0.6)"
          }}
        >
          {/* –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ç–æ—Ä—ã */}
          <div 
            className="w-full h-full rounded-full"
            style={{ 
              background: `conic-gradient(${
                segments.map((segment, index) => 
                  `${segment.color} ${index * segmentAngle}deg ${(index + 1) * segmentAngle}deg`
                ).join(', ')
              })`
            }}
          >
            {/* –ù–µ–æ–Ω–æ–≤–∞—è —Ä–∞–º–∫–∞ –±–∞—Ä–∞–±–∞–Ω–∞ */}
            <div 
              className={`absolute inset-0 rounded-full border-4 border-primary/50 ${
                spinning ? 'animate-pulse-slow' : ''
              } neon-border overflow-hidden`}
              style={{ 
                transform: `scale(0.95)`,
                backdropFilter: 'blur(2px)'
              }}
            >
              <div className={`absolute inset-0 bg-gradient-to-br from-transparent via-primary/10 to-transparent ${spinning ? 'animate-shine' : ''}`}></div>
            </div>
          </div>

          {segments.map((segment, index) => {
            // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —É–≥–æ–ª –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
            const middleAngle = ((index * segmentAngle) + ((index + 1) * segmentAngle)) / 2;
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ä–∞–¥–∏–∞–Ω—ã
            const angleInRadians = (middleAngle - 90) * Math.PI / 180;
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–±–ª–∏–∂–µ –∫ –≤–Ω–µ—à–Ω–µ–º—É –∫—Ä–∞—é)
            const radius = 40; // % –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–ª–µ—Å–∞
            const x = 50 + radius * Math.cos(angleInRadians);
            const y = 50 + radius * Math.sin(angleInRadians);
            
            // –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ —ç–º–æ–¥–∂–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            const hasEmoji = segment.text.match(/[\p{Emoji}]/u);
            const textParts = hasEmoji ? segment.text.split(/(\p{Emoji}+)/u).filter(Boolean) : [segment.text];
            
            return (
              <div 
                key={segment.id}
                className="absolute text-white font-bold text-center"
                style={{ 
                  left: `${x}%`, 
                  top: `${y}%`,
                  transform: `translate(-50%, -50%) rotate(${middleAngle}deg)`,
                  textShadow: '1px 1px 3px rgba(0,0,0,0.8), -1px -1px 3px rgba(0,0,0,0.8)',
                  maxWidth: '80px'
                }}
              >
                {textParts.map((part, i) => {
                  const isEmoji = part.match(/[\p{Emoji}]/u);
                  return isEmoji ? (
                    <span 
                      key={i} 
                      className={`text-xl ${spinning ? 'animate-bounce-slow' : ''}`} 
                      style={{ display: 'inline-block' }}
                    >
                      {part}
                    </span>
                  ) : (
                    <span key={i}>{part}</span>
                  );
                })}
              </div>
            );
          })}

          {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –º–µ–∂–¥—É —Å–µ–∫—Ç–æ—Ä–∞–º–∏ */}
          {segments.map((_, index) => (
            <div 
              key={`line-${index}`}
              className="absolute top-1/2 left-1/2 w-1/2 h-0.5 bg-gray-800/80 origin-left"
              style={{ transform: `rotate(${index * segmentAngle}deg)` }}
            />
          ))}

          {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ */}
          <div className="absolute top-1/2 left-1/2 w-8 h-8 bg-gray-800 rounded-full -translate-x-1/2 -translate-y-1/2 shadow-[0_0_10px_rgba(0,0,0,0.8),inset_0_0_5px_rgba(255,255,255,0.2)]">
            <div className="w-4 h-4 bg-gray-700 rounded-full absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2"></div>
          </div>
          
          {/* –≠—Ñ—Ñ–µ–∫—Ç –±–ª–µ—Å–∫–∞ –ø—Ä–∏ –≤—Ä–∞—â–µ–Ω–∏–∏ */}
          {spinning && (
            <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent animate-shine"></div>
          )}
        </div>
      </div>
      
      <Button 
        onClick={spinWheel} 
        disabled={spinning}
        className="px-8 py-2 text-lg relative overflow-hidden group"
        size="lg"
        variant="neon"
      >
        {spinning ? (
          <>
            <span className="mr-2 animate-spin inline-block">üé∞</span>
            –ö—Ä—É—Ç–∏—Ç—Å—è...
          </>
        ) : (
          <>
            <span className="mr-2 group-hover:animate-bounce-slow inline-block">üéÆ</span>
            –ö—Ä—É—Ç–∏—Ç—å!
          </>
        )}
        <span className="absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent translate-x-[-100%] group-hover:animate-shine"></span>
      </Button>
      
      {selectedSegment && (
        <div className="mt-4 text-lg font-medium animate-fade-in flex items-center justify-center">
          –í—ã–ø–∞–ª–æ: <span className="font-bold text-primary neon-text ml-2">{selectedSegment}</span>
          <span className="ml-2 animate-bounce-slow text-xl">üéâ</span>
        </div>
      )}
    </div>
  );
};

export default Wheel;
